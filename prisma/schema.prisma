// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

<<<<<<< HEAD
// @see https://www.npmjs.com/package/prisma-erd-generator
=======
>>>>>>> 9f7e1978feffb4bf1c4a9d3fc4bc2080cc48647e
generator erd {
  provider                  = "prisma-erd-generator"
  output                    = "../prismaERD.svg"
  theme                     = "forest"
  mmdcPath                  = "node_modules/.bin"
  includeRelationFromFields = true
}

// @see https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
// @see https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for NextAuth
model Account {
  id                       String       @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?      @db.Text
  refresh_token_expires_in Int?
  access_token             String?      @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?      @db.Text
  session_state            String?
  user                     User         @relation(fields: [userId], references: [id], onDelete: Cascade, map: "user_fk")
  // postgresDB               PostgreSQL[]
  // postgresDB               PostgreSQL? @relation(fields: [userId], references: [id], onDelete: Cascade, map: "pg_fk")
  // mySQLDB                  MySQL[]
  // mySQLDB                  MySQL?      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "mysql_fk")
  // @see https://github.com/prisma/prisma/discussions/11108
  PostgreSQL               PostgreSQL[]
  MySQL                    MySQL[]

  // DATABASE_URL --> db.connect() // mongosh DATABASE_URL
  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  PostgreSQL    PostgreSQL[]
  MySQL         MySQL[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PostgreSQL {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  pg_username String // --> store securely
  pg_password String // --> store securely
  Account     Account? @relation(fields: [accountId], references: [id])
  accountId   String?

  @@index([userId])
  @@index([accountId])
}

model MySQL {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  mysql_username String // --> store securely
  mysql_password String // --> store securely
  Account        Account? @relation(fields: [accountId], references: [id])
  accountId      String?

  @@index([userId])
  @@index([accountId])
}
